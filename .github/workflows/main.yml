name: assessment

on:
  pull_request:
    types:
      - closed

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build artifacts
        run: |
          # Build your artifacts here
          # For example, you can run any build commands or generate the necessary files
          # In this case, let's assume app.py is the main file to deploy
          # Copy or generate any other required files as well

          # Copy app.py to a deployment directory
          mkdir deployment
          cp app.py deployment/app.py

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: my-artifacts
          path: deployment

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: my-artifacts
          path: deployment

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: v1.0.0
          release_name: Release v1.0.0
          draft: false
          prerelease: false

      - name: Upload release asset
        id: upload_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deployment/app.py
          asset_name: app.py
          asset_content_type: text/x-python

  deploy:
    needs: release
    runs-on: ubuntu-latest

    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v2

    #   - name: Download release asset
    #     run: |
    #       asset_url=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/v1.0.0" -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" | jq -r '.assets[] | select(.name == "app.py").browser_download_url')
    #       curl -sLJO -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" "$asset_url"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download release asset
        uses: actions/download-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          repository: ${{ github.repository }}
          asset_path: deployment/app.py
          asset_name: app.py

      # - name: Deploy application
      #   run: |
      #     # Deploy your application here
      #     # For example, you can copy the app.py file to a server or execute any deployment steps
      #     # Replace this with your actual deployment logic

      #     # Assuming you're copying the app.py to the deployment server
      #    scp deployment/app.py user@deployment-server:/path/to/deployment
