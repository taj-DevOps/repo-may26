name: assessment

on:
  push:
    branches:
      - feature/taj

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build artifacts
        run: |
          mkdir deployment
          cp ./app.py deployment/app.py

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: my-artifacts
          path: deployment

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Determine last release version
      #   id: last_release
      #   run: |
      #     last_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1")
      #     echo "::set-output name=last_version::$last_version"

      - name: Determine new version
        id: new_version
        run: |
          last_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          version_parts=($(echo "$last_version" | tr -d 'v' | tr '.' ' '))
           major=${version_parts[0]}
           minor=${version_parts[1]}
           patch=${version_parts[2]}
           ((patch++))
           new_version="v${major}.${minor}.${patch}"
           echo "NEW_VERSION=${new_version}" >> $GITHUB_ENV
        shell: bash
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: my-artifacts
          path: deployment

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
