name: assessment

on:
  push:
    branches:
      - feature/taj

env:
  LAST_VERSION: "0.0.0"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build artifacts
        run: |
          mkdir deployment
          cp ./app.py deployment/app.py

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: my-artifacts
          path: deployment

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine last release version
        id: last_release
        run: |
          last_version="${{ env.LAST_VERSION }}"
          IFS='.' read -r major minor patch <<< "$last_version"
          ((patch++))
          new_version="${major}.${minor}.${patch}"
          echo $new_version >> version.txt

      - name: Read new version
        id: read_version
        run: |
          echo "::set-output name=new_version::$(cat version.txt)"

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: my-artifacts
          path: deployment

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: v${{ steps.read_version.outputs.new_version }}
          release_name: Release ${{ steps.read_version.outputs.new_version }}
          draft: false
          prerelease: false

      - name: Upload release asset
        id: upload_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deployment/app.py
          asset_name: app.py
          asset_content_type: text/x-python

      - name: Set new version as last version
        run: |
          echo "LAST_VERSION=${{ steps.read_version.outputs.new_version }}" >> $GITHUB_ENV

  deploy:
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download release asset
        uses: actions/github-script@v4
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            async function downloadReleaseAsset() {
              try {
                const { data: releases } = await github.repos.listReleases({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 1,
                });
                const release = releases[0];
                const { data: assets } = await github.repos.listReleaseAssets({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                });
                const asset = assets.find(a => a.name === 'app.py');
                const response = await github.repos.getReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: asset.id,
                });
                const deploymentPath = path.join(process.env.GITHUB_WORKSPACE, 'deployment');
                fs.mkdirSync(deploymentPath, { recursive: true });
                fs.writeFileSync(path.join(deploymentPath, 'app.py'), response.data);
              } catch (error) {
                console.error(error);
                process.exit(1);
              }
            }
            downloadReleaseAsset();

